
variables:
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - test
  - package
  - deploy

services:
  - docker:19.03.12-dind

test:
  image: node:12
  stage: test
  services:
    - name: mysql:latest
      alias: db
  variables:
    DB_HOST: db
    DB_PASS: tests
    MYSQL_DATABASE: accountManage
    MYSQL_ROOT_PASSWORD: tests
  before_script:
    - npm ci
    - |
      cat <<EOD > config/config.json
      {
        "local": {
          "username": "root",
          "password": "${DB_PASS}",
          "database": "${MYSQL_DATABASE}",
          "host": "${DB_HOST}",
          "dialect": "mysql"
        }
      }
      EOD
    - npm run init-db
    - npm run seed
  script:
    - npm test

build:
  image: docker:19.03.12
  stage: package
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t "$CI_REGISTRY_IMAGE:$CI_PIPELINE_IID" -t "$CI_REGISTRY_IMAGE:latest" .
    - docker tag "$CI_REGISTRY_IMAGE:$CI_PIPELINE_IID" "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:$CI_PIPELINE_IID"
    - docker push "$CI_REGISTRY_IMAGE:latest"

deploy:
  image: henry40408/doctl-kubectl
  stage: deploy
  script:
    - doctl auth init -t f7811876afc38bfb8c721ffeb23b8ebe4073fcefedda4011fbd67ac17d04c7e7
    - doctl kubernetes cluster kubeconfig save babcd90d-ecd9-4661-aa8e-dab71c5f5c0a
    - cd helm/account-management-api
    - helm upgrade --install account-management-api --set image.tag=$CI_PIPELINE_IID --set database.storage=db.sqlite,database.dialect=sqlite,resetDb=true .
